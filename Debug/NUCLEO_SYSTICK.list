
NUCLEO_SYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b88  08000b88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b98  08000b98  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b98  08000b98  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b98  08000b98  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b98  08000b98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b9c  08000b9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000ba4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000ba4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bdd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062c  00000000  00000000  00021c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  000223f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e043  00000000  00000000  00022558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001bad  00000000  00000000  0003059b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000502ad  00000000  00000000  00032148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000823f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e4  00000000  00000000  00082448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b70 	.word	0x08000b70

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000b70 	.word	0x08000b70

080001d4 <main>:
#define		Bit_green		(unsigned int) 4



int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
    uint32_t Timer1 = 0UL;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]
    uint32_t Timer2 = 0UL;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
    uint32_t Timer3 = 0UL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	613b      	str	r3, [r7, #16]

    // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
    // Auch die Groesse des Arrays wird berechnet.
    uint32_t *timerList[] = { &Timer1, &Timer2, &Timer3 /*, weitere Timer */ };
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	60bb      	str	r3, [r7, #8]
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	60fb      	str	r3, [r7, #12]
    size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 80001f8:	2303      	movs	r3, #3
 80001fa:	61fb      	str	r3, [r7, #28]



    // Konfiguration des SysTick-Timers

    systickInit(SYSTICK_1MS);
 80001fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000200:	f000 fb96 	bl	8000930 <systickInit>

    // Konfiguration von GPIOA, Pin0 und Pin1
    gpioSelectPort(LED_GPIO);
 8000204:	4838      	ldr	r0, [pc, #224]	; (80002e8 <main+0x114>)
 8000206:	f000 f953 	bl	80004b0 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 800020a:	2201      	movs	r2, #1
 800020c:	2103      	movs	r1, #3
 800020e:	4836      	ldr	r0, [pc, #216]	; (80002e8 <main+0x114>)
 8000210:	f000 f9b2 	bl	8000578 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8000214:	2200      	movs	r2, #0
 8000216:	2103      	movs	r1, #3
 8000218:	4833      	ldr	r0, [pc, #204]	; (80002e8 <main+0x114>)
 800021a:	f000 fa7a 	bl	8000712 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 800021e:	2201      	movs	r2, #1
 8000220:	2103      	movs	r1, #3
 8000222:	4831      	ldr	r0, [pc, #196]	; (80002e8 <main+0x114>)
 8000224:	f000 fabe 	bl	80007a4 <gpioSelectPushPullMode>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8000228:	2201      	movs	r2, #1
 800022a:	2104      	movs	r1, #4
 800022c:	482e      	ldr	r0, [pc, #184]	; (80002e8 <main+0x114>)
 800022e:	f000 f9a3 	bl	8000578 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8000232:	2200      	movs	r2, #0
 8000234:	2104      	movs	r1, #4
 8000236:	482c      	ldr	r0, [pc, #176]	; (80002e8 <main+0x114>)
 8000238:	f000 fa6b 	bl	8000712 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 800023c:	2201      	movs	r2, #1
 800023e:	2104      	movs	r1, #4
 8000240:	4829      	ldr	r0, [pc, #164]	; (80002e8 <main+0x114>)
 8000242:	f000 faaf 	bl	80007a4 <gpioSelectPushPullMode>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8000246:	2201      	movs	r2, #1
 8000248:	210a      	movs	r1, #10
 800024a:	4827      	ldr	r0, [pc, #156]	; (80002e8 <main+0x114>)
 800024c:	f000 f994 	bl	8000578 <gpioSelectPinMode>
      gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8000250:	2200      	movs	r2, #0
 8000252:	210a      	movs	r1, #10
 8000254:	4824      	ldr	r0, [pc, #144]	; (80002e8 <main+0x114>)
 8000256:	f000 fa5c 	bl	8000712 <gpioSetOutputType>
      gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 800025a:	2201      	movs	r2, #1
 800025c:	210a      	movs	r1, #10
 800025e:	4822      	ldr	r0, [pc, #136]	; (80002e8 <main+0x114>)
 8000260:	f000 faa0 	bl	80007a4 <gpioSelectPushPullMode>

    while (1)
    {

        if (true == timerTrigger)
 8000264:	4b21      	ldr	r3, [pc, #132]	; (80002ec <main+0x118>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d006      	beq.n	800027a <main+0xa6>
        {
            systickUpdateTimerList((uint32_t *) timerList, arraySize);
 800026c:	69fb      	ldr	r3, [r7, #28]
 800026e:	b2da      	uxtb	r2, r3
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4611      	mov	r1, r2
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fb9b 	bl	80009b0 <systickUpdateTimerList>
        }

        if (isSystickExpired(Timer1))
 800027a:	69bb      	ldr	r3, [r7, #24]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fb79 	bl	8000974 <isSystickExpired>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d00a      	beq.n	800029e <main+0xca>
        {
            gpioTogglePin(LED_GPIO, LED_red);
 8000288:	2103      	movs	r1, #3
 800028a:	4817      	ldr	r0, [pc, #92]	; (80002e8 <main+0x114>)
 800028c:	f000 fa16 	bl	80006bc <gpioTogglePin>
            systickSetTicktime(&Timer1, DELAY_red);
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	f44f 7161 	mov.w	r1, #900	; 0x384
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fb5d 	bl	8000958 <systickSetTicktime>
        }

        if (isSystickExpired(Timer2))
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fb67 	bl	8000974 <isSystickExpired>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00a      	beq.n	80002c2 <main+0xee>
        {
            gpioTogglePin(LED_GPIO, LED_green);
 80002ac:	2104      	movs	r1, #4
 80002ae:	480e      	ldr	r0, [pc, #56]	; (80002e8 <main+0x114>)
 80002b0:	f000 fa04 	bl	80006bc <gpioTogglePin>
            systickSetTicktime(&Timer2, DELAY_green);
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fb4b 	bl	8000958 <systickSetTicktime>
        }
        if (isSystickExpired(Timer3))
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fb55 	bl	8000974 <isSystickExpired>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0c9      	beq.n	8000264 <main+0x90>
        {
            gpioTogglePin(LED_GPIO, LED_blue);
 80002d0:	210a      	movs	r1, #10
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <main+0x114>)
 80002d4:	f000 f9f2 	bl	80006bc <gpioTogglePin>
            systickSetTicktime(&Timer3, DELAY_blue);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fb39 	bl	8000958 <systickSetTicktime>
        if (true == timerTrigger)
 80002e6:	e7bd      	b.n	8000264 <main+0x90>
 80002e8:	40020400 	.word	0x40020400
 80002ec:	20000020 	.word	0x20000020

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f000 fb86 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 fc03 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff57 	bl	80001d4 <main>

08000326 <LoopForever>:

LoopForever:
  b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000334:	08000ba0 	.word	0x08000ba0
  ldr r2, =_sbss
 8000338:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800033c:	20000024 	.word	0x20000024

08000340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a10      	ldr	r2, [pc, #64]	; (8000390 <gpioVerifyPort+0x4c>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d013      	beq.n	800037c <gpioVerifyPort+0x38>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a0f      	ldr	r2, [pc, #60]	; (8000394 <gpioVerifyPort+0x50>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d00f      	beq.n	800037c <gpioVerifyPort+0x38>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <gpioVerifyPort+0x54>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d00b      	beq.n	800037c <gpioVerifyPort+0x38>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <gpioVerifyPort+0x58>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d007      	beq.n	800037c <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <gpioVerifyPort+0x5c>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d003      	beq.n	800037c <gpioVerifyPort+0x38>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <gpioVerifyPort+0x60>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d101      	bne.n	8000380 <gpioVerifyPort+0x3c>
    {
        return true;
 800037c:	2301      	movs	r3, #1
 800037e:	e000      	b.n	8000382 <gpioVerifyPort+0x3e>
    }
    return false;
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40020400 	.word	0x40020400
 8000398:	40020800 	.word	0x40020800
 800039c:	40020c00 	.word	0x40020c00
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40021c00 	.word	0x40021c00

080003a8 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d02c      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d029      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d026      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d023      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b04      	cmp	r3, #4
 80003ce:	d020      	beq.n	8000412 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2b05      	cmp	r3, #5
 80003d4:	d01d      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d01a      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	2b07      	cmp	r3, #7
 80003e0:	d017      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2b08      	cmp	r3, #8
 80003e6:	d014      	beq.n	8000412 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	2b09      	cmp	r3, #9
 80003ec:	d011      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b0a      	cmp	r3, #10
 80003f2:	d00e      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	2b0b      	cmp	r3, #11
 80003f8:	d00b      	beq.n	8000412 <gpioVerifyPin+0x6a>
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2b0c      	cmp	r3, #12
 80003fe:	d008      	beq.n	8000412 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	2b0d      	cmp	r3, #13
 8000404:	d005      	beq.n	8000412 <gpioVerifyPin+0x6a>
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b0e      	cmp	r3, #14
 800040a:	d002      	beq.n	8000412 <gpioVerifyPin+0x6a>
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	2b0f      	cmp	r3, #15
 8000410:	d101      	bne.n	8000416 <gpioVerifyPin+0x6e>
    {
        return true;
 8000412:	2301      	movs	r3, #1
 8000414:	e000      	b.n	8000418 <gpioVerifyPin+0x70>
    }
    return false;
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d008      	beq.n	8000446 <gpioVerifyPinMode+0x22>
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d005      	beq.n	8000446 <gpioVerifyPinMode+0x22>
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d002      	beq.n	8000446 <gpioVerifyPinMode+0x22>
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2b03      	cmp	r3, #3
 8000444:	d101      	bne.n	800044a <gpioVerifyPinMode+0x26>
    {
        return true;
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <gpioVerifyPinMode+0x28>
    }

    return false;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d002      	beq.n	800046e <gpioVerifyOutputType+0x16>
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d101      	bne.n	8000472 <gpioVerifyOutputType+0x1a>
    {
        return true;
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d005      	beq.n	800049c <gpioVerifyPushPullMode+0x1c>
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d002      	beq.n	800049c <gpioVerifyPushPullMode+0x1c>
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d101      	bne.n	80004a0 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 800049c:	2301      	movs	r3, #1
 800049e:	e000      	b.n	80004a2 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ff43 	bl	8000344 <gpioVerifyPort>
 80004be:	4603      	mov	r3, r0
 80004c0:	f083 0301 	eor.w	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d002      	beq.n	80004d0 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	e041      	b.n	8000554 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a22      	ldr	r2, [pc, #136]	; (800055c <gpioSelectPort+0xac>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <gpioSelectPort+0xb0>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a20      	ldr	r2, [pc, #128]	; (8000560 <gpioSelectPort+0xb0>)
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
 80004e4:	e035      	b.n	8000552 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <gpioSelectPort+0xb4>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <gpioSelectPort+0xb0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <gpioSelectPort+0xb0>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	e02a      	b.n	8000552 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <gpioSelectPort+0xb8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <gpioSelectPort+0xb0>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a15      	ldr	r2, [pc, #84]	; (8000560 <gpioSelectPort+0xb0>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
 8000510:	e01f      	b.n	8000552 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a15      	ldr	r2, [pc, #84]	; (800056c <gpioSelectPort+0xbc>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <gpioSelectPort+0xb0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <gpioSelectPort+0xb0>)
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	e014      	b.n	8000552 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a11      	ldr	r2, [pc, #68]	; (8000570 <gpioSelectPort+0xc0>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <gpioSelectPort+0xb0>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <gpioSelectPort+0xb0>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
 800053c:	e009      	b.n	8000552 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <gpioSelectPort+0xc4>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d105      	bne.n	8000552 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <gpioSelectPort+0xb0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <gpioSelectPort+0xb0>)
 800054c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40020000 	.word	0x40020000
 8000560:	40023800 	.word	0x40023800
 8000564:	40020400 	.word	0x40020400
 8000568:	40020800 	.word	0x40020800
 800056c:	40020c00 	.word	0x40020c00
 8000570:	40021000 	.word	0x40021000
 8000574:	40021c00 	.word	0x40021c00

08000578 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
 8000584:	4613      	mov	r3, r2
 8000586:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff fedb 	bl	8000344 <gpioVerifyPort>
 800058e:	4603      	mov	r3, r0
 8000590:	f083 0301 	eor.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e032      	b.n	8000606 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff00 	bl	80003a8 <gpioVerifyPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80005b4:	f06f 0301 	mvn.w	r3, #1
 80005b8:	e025      	b.n	8000606 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 80005ba:	78bb      	ldrb	r3, [r7, #2]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff31 	bl	8000424 <gpioVerifyPinMode>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 80005ce:	f06f 0305 	mvn.w	r3, #5
 80005d2:	e018      	b.n	8000606 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	78fa      	ldrb	r2, [r7, #3]
 80005da:	0052      	lsls	r2, r2, #1
 80005dc:	2103      	movs	r1, #3
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	401a      	ands	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 80005ea:	78bb      	ldrb	r3, [r7, #2]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d009      	beq.n	8000604 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	78b9      	ldrb	r1, [r7, #2]
 80005f6:	78fa      	ldrb	r2, [r7, #3]
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe92 	bl	8000344 <gpioVerifyPort>
 8000620:	4603      	mov	r3, r0
 8000622:	f083 0301 	eor.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	e014      	b.n	800065c <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff feb7 	bl	80003a8 <gpioVerifyPin>
 800063a:	4603      	mov	r3, r0
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8000646:	f06f 0301 	mvn.w	r3, #1
 800064a:	e007      	b.n	800065c <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2201      	movs	r2, #1
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	461a      	mov	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff fe67 	bl	8000344 <gpioVerifyPort>
 8000676:	4603      	mov	r3, r0
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	e015      	b.n	80006b4 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fe8c 	bl	80003a8 <gpioVerifyPin>
 8000690:	4603      	mov	r3, r0
 8000692:	f083 0301 	eor.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 800069c:	f06f 0301 	mvn.w	r3, #1
 80006a0:	e008      	b.n	80006b4 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	3310      	adds	r3, #16
 80006a6:	2201      	movs	r2, #1
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <gpioTogglePin>:
 *          <td rowspan="1">Calls the functions gpioSetPin() and gpioResetPin()</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioTogglePin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPin(pin) != true)
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fe6c 	bl	80003a8 <gpioVerifyPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f083 0301 	eor.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <gpioTogglePin+0x26>
    {
        return GPIO_INVALID_PIN;
 80006dc:	f06f 0301 	mvn.w	r3, #1
 80006e0:	e013      	b.n	800070a <gpioTogglePin+0x4e>
    }
    if (gpioGetPinState(port, pin))
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f8b9 	bl	800085e <gpioGetPinState>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <gpioTogglePin+0x42>
    {
       gpioResetPin(port, pin);
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ffb4 	bl	8000664 <gpioResetPin>
 80006fc:	e004      	b.n	8000708 <gpioTogglePin+0x4c>
    }
    else
    {
        gpioSetPin(port, pin);
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	4619      	mov	r1, r3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff83 	bl	800060e <gpioSetPin>
    }

    return GPIO_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	70fb      	strb	r3, [r7, #3]
 800071e:	4613      	mov	r3, r2
 8000720:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff fe0e 	bl	8000344 <gpioVerifyPort>
 8000728:	4603      	mov	r3, r0
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	e030      	b.n	800079c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe33 	bl	80003a8 <gpioVerifyPin>
 8000742:	4603      	mov	r3, r0
 8000744:	f083 0301 	eor.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 800074e:	f06f 0301 	mvn.w	r3, #1
 8000752:	e023      	b.n	800079c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8000754:	78bb      	ldrb	r3, [r7, #2]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fe7e 	bl	8000458 <gpioVerifyOutputType>
 800075c:	4603      	mov	r3, r0
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8000768:	f06f 0303 	mvn.w	r3, #3
 800076c:	e016      	b.n	800079c <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	43d2      	mvns	r2, r2
 800077c:	401a      	ands	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8000782:	78bb      	ldrb	r3, [r7, #2]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d108      	bne.n	800079a <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	78fa      	ldrb	r2, [r7, #3]
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	431a      	orrs	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
 80007b0:	4613      	mov	r3, r2
 80007b2:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fdc5 	bl	8000344 <gpioVerifyPort>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	e044      	b.n	8000856 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fdea 	bl	80003a8 <gpioVerifyPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f083 0301 	eor.w	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80007e0:	f06f 0301 	mvn.w	r3, #1
 80007e4:	e037      	b.n	8000856 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 80007e6:	78bb      	ldrb	r3, [r7, #2]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe49 	bl	8000480 <gpioVerifyPushPullMode>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f083 0301 	eor.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 80007fa:	f06f 0306 	mvn.w	r3, #6
 80007fe:	e02a      	b.n	8000856 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	78fa      	ldrb	r2, [r7, #3]
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	2103      	movs	r1, #3
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	43d2      	mvns	r2, r2
 8000810:	401a      	ands	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d11a      	bne.n	8000854 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 800081e:	78bb      	ldrb	r3, [r7, #2]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d10a      	bne.n	800083a <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	78fa      	ldrb	r2, [r7, #3]
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	2101      	movs	r1, #1
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	431a      	orrs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	e00c      	b.n	8000854 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 800083a:	78bb      	ldrb	r3, [r7, #2]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d109      	bne.n	8000854 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	2102      	movs	r1, #2
 800084a:	fa01 f202 	lsl.w	r2, r1, r2
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	78fa      	ldrb	r2, [r7, #3]
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4013      	ands	r3, r2
 8000878:	78fa      	ldrb	r2, [r7, #3]
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	4293      	cmp	r3, r2
 8000882:	bf0c      	ite	eq
 8000884:	2301      	moveq	r3, #1
 8000886:	2300      	movne	r3, #0
 8000888:	b2db      	uxtb	r3, r3
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008fc:	d301      	bcc.n	8000902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fe:	2301      	movs	r3, #1
 8000900:	e00f      	b.n	8000922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <SysTick_Config+0x40>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090a:	210f      	movs	r1, #15
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f7ff ffc2 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <SysTick_Config+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <SysTick_Config+0x40>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	e000e010 	.word	0xe000e010

08000930 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8000938:	f000 f876 	bl	8000a28 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <systickInit+0x24>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ffd0 	bl	80008ec <SysTick_Config>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000

08000958 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <isSystickExpired+0x16>
	{
		timerState = true;
 8000986:	2301      	movs	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	timerTrigger = true;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <SysTick_Handler+0x14>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	20000020 	.word	0x20000020

080009b0 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e011      	b.n	80009e6 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <systickUpdateTimerList+0x30>
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	7bfa      	ldrb	r2, [r7, #15]
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3e9      	bcc.n	80009c2 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <systickUpdateTimerList+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000020 	.word	0x20000020

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	2302      	movs	r3, #2
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a42:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <SystemCoreClockUpdate+0xec>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d011      	beq.n	8000a76 <SystemCoreClockUpdate+0x4e>
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	d844      	bhi.n	8000ae2 <SystemCoreClockUpdate+0xba>
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <SystemCoreClockUpdate+0x3e>
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d004      	beq.n	8000a6e <SystemCoreClockUpdate+0x46>
 8000a64:	e03d      	b.n	8000ae2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <SystemCoreClockUpdate+0xf0>)
 8000a68:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <SystemCoreClockUpdate+0xf4>)
 8000a6a:	601a      	str	r2, [r3, #0]
      break;
 8000a6c:	e03d      	b.n	8000aea <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <SystemCoreClockUpdate+0xf0>)
 8000a70:	4a2b      	ldr	r2, [pc, #172]	; (8000b20 <SystemCoreClockUpdate+0xf8>)
 8000a72:	601a      	str	r2, [r3, #0]
      break;
 8000a74:	e039      	b.n	8000aea <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <SystemCoreClockUpdate+0xec>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	0d9b      	lsrs	r3, r3, #22
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <SystemCoreClockUpdate+0xec>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a8a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00c      	beq.n	8000aac <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <SystemCoreClockUpdate+0xf8>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <SystemCoreClockUpdate+0xec>)
 8000a9c:	6852      	ldr	r2, [r2, #4]
 8000a9e:	0992      	lsrs	r2, r2, #6
 8000aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e00b      	b.n	8000ac4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <SystemCoreClockUpdate+0xf4>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <SystemCoreClockUpdate+0xec>)
 8000ab6:	6852      	ldr	r2, [r2, #4]
 8000ab8:	0992      	lsrs	r2, r2, #6
 8000aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000abe:	fb02 f303 	mul.w	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <SystemCoreClockUpdate+0xec>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	0c1b      	lsrs	r3, r3, #16
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <SystemCoreClockUpdate+0xf0>)
 8000ade:	6013      	str	r3, [r2, #0]
      break;
 8000ae0:	e003      	b.n	8000aea <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <SystemCoreClockUpdate+0xf0>)
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <SystemCoreClockUpdate+0xf4>)
 8000ae6:	601a      	str	r2, [r3, #0]
      break;
 8000ae8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <SystemCoreClockUpdate+0xec>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <SystemCoreClockUpdate+0xfc>)
 8000af6:	5cd3      	ldrb	r3, [r2, r3]
 8000af8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <SystemCoreClockUpdate+0xf0>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <SystemCoreClockUpdate+0xf0>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40023800 	.word	0x40023800
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	00f42400 	.word	0x00f42400
 8000b20:	007a1200 	.word	0x007a1200
 8000b24:	08000b88 	.word	0x08000b88

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4d0d      	ldr	r5, [pc, #52]	; (8000b60 <__libc_init_array+0x38>)
 8000b2c:	4c0d      	ldr	r4, [pc, #52]	; (8000b64 <__libc_init_array+0x3c>)
 8000b2e:	1b64      	subs	r4, r4, r5
 8000b30:	10a4      	asrs	r4, r4, #2
 8000b32:	2600      	movs	r6, #0
 8000b34:	42a6      	cmp	r6, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	4d0b      	ldr	r5, [pc, #44]	; (8000b68 <__libc_init_array+0x40>)
 8000b3a:	4c0c      	ldr	r4, [pc, #48]	; (8000b6c <__libc_init_array+0x44>)
 8000b3c:	f000 f818 	bl	8000b70 <_init>
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	10a4      	asrs	r4, r4, #2
 8000b44:	2600      	movs	r6, #0
 8000b46:	42a6      	cmp	r6, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b50:	4798      	blx	r3
 8000b52:	3601      	adds	r6, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5a:	4798      	blx	r3
 8000b5c:	3601      	adds	r6, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08000b98 	.word	0x08000b98
 8000b64:	08000b98 	.word	0x08000b98
 8000b68:	08000b98 	.word	0x08000b98
 8000b6c:	08000b9c 	.word	0x08000b9c

08000b70 <_init>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	bf00      	nop
 8000b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b76:	bc08      	pop	{r3}
 8000b78:	469e      	mov	lr, r3
 8000b7a:	4770      	bx	lr

08000b7c <_fini>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr
